apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }
    
    compileSdkVersion 26
    buildToolsVersion "26.0.0"

    defaultConfig {
        applicationId "com.tatx.clientapp"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile "com.android.support:multidex:1.0.1"

    compile project(':react-native-sound')
    compile project(':react-native-restart')
    compile project(':react-native-localization')
    compile project(':react-native-image-picker')
    compile project(':react-native-keep-awake')
    compile project(':react-native-video')
    compile project(':react-native-mauron85-background-geolocation')
    compile project(':react-native-navigation')
    compile project(':react-native-vector-icons')
    compile project(':react-native-wheel-picker-android')
    compile project(':react-native-linear-gradient')

    compile(project(':react-native-google-places')){
        exclude group: 'com.google.android.gms'
    }

    compile ("com.google.android.gms:play-services-base:11.6.0") {
        force = true;
    }
    compile ("com.google.android.gms:play-services-location:11.6.0") {
        force = true;
    }
    compile ("com.google.android.gms:play-services-maps:11.6.0") {
        force = true;
    }
    compile ("com.google.android.gms:play-services-places:11.6.0") {
        force = true;
    }

    compile(project(':react-native-maps')){
        exclude group: "com.google.android.gms"
        exclude group: "com.google.firebase"
    }

    compile(project(':react-native-firebase')) {
        transitive = false
    }


    compile ('com.google.firebase:firebase-core:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-ads:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-auth:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-config:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-crash:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-database:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-firestore:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-analytics:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-storage:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-messaging:11.6.0') {
        force = true;
    }
    compile ('com.google.firebase:firebase-perf:11.6.0') {
        force = true;
    }
    // compile "com.google.android.gms:play-services-location:11.4.2"
    // compile "com.google.android.gms:play-services-maps:11.4.2"

    // // RNFirebase required dependencies00
    // compile "com.google.firebase:firebase-core:11.4.2"

    // // RNFirebase optional dependencies
    // compile "com.google.firebase:firebase-ads:11.4.2"
    // compile "com.google.firebase:firebase-auth:11.4.2"
    // compile "com.google.firebase:firebase-config:11.4.2"
    // compile "com.google.firebase:firebase-crash:11.4.2"
    // compile "com.google.firebase:firebase-database:11.4.2"
    // compile "com.google.firebase:firebase-firestore:11.4.2"
    // compile "com.google.firebase:firebase-messaging:11.4.2"
    // compile "com.google.firebase:firebase-perf:11.4.2"
    // compile "com.google.firebase:firebase-storage:11.4.2"

    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:25.3.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
apply plugin: 'com.google.gms.google-services'